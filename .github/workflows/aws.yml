name: Deploy to Amazon ECS Fargate

on:
  release:
    types:
      - released

env:
  # login to aws
  AWS_REGION: ap-northeast-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActions
  # build
  MCBE_SERVER_ZIP_PATH: ${{ vars.MCBE_SERVER_ZIP_PATH }}
  # push image to ecr
  ECR_REPOSITORY: mcbe/server
  # render task difinition
  ECS_TASK_DIFINITION_FAMILY: mcbe_server_family
  ECS_TASK_DIFINITION_REVISION: 6
  ECS_CONTAINER: server
  # deploy
  ECS_CLUSTER: mc-chiwanano
  ECS_SERVICE: mcbe_service

permissions:
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy to ECS Fargate
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          # IAMロールでログイン
          role-to-assume: ${{ env.AWS_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export IMAGE=${ECR_REGISTRY}/${ECR_REPOSITORY}
          docker build -t ${IMAGE}:${IMAGE_TAG} . --build-arg MCBE_SERVER_ZIP_PATH=${{ env.MCBE_SERVER_ZIP_PATH }}
          docker tag ${IMAGE}:${IMAGE_TAG} ${IMAGE}:latest
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "image_with_tag=${IMAGE}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Push image to Amazon ECR
        run: |
          docker push ${{ steps.build.outputs.image }} -a

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.ECS_TASK_DIFINITION_FAMILY }}
          task-definition-revision: ${{ env.ECS_TASK_DIFINITION_REVISION }}
          container-name: ${{ env.ECS_CONTAINER }}
          image: ${{ steps.build.outputs.image_with_tag }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # - name: get world data
  # branch tpywao/mc-chiwanano

  # - name: get server config
  # RUN curl -LO https://gist.githubusercontent.com/tpywao/7620bdfdf478996372bb26a43c43b6cf/raw/795789431cee5513004e627763e678e106b41b0b/server.properties
