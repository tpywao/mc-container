name: Deploy to Amazon ECS Fargate

on:
  # TODO: on push 以外に良さげなタイミングないかな
  push:
    branches:
      - main

env:
  # login to aws
  AWS_REGION: ap-northeast-1
  AWS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActions
  # push image to ecr
  ECR_REPOSITORY: mcbe/server
  # render task difinition
  ECS_TASK_DIFINITION: .aws/task-definition.json
  ECS_CONTAINER: server
  # deploy
  ECS_CLUSTER: mc-chiwanano
  ECS_SERVICE: mcbe_service

permissions:
  contents: read

jobs:
  login-ecr:
    name: Login to ECR
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.output.outputs.registry }}
      registry-origin: ${{ steps.login.outputs.registry }}
    permissions:
      id-token: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          # IAMロールでログイン
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          # IAMユーザでログイン
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "false"

      - name: Output
        id: output
        run: |
          echo "registry=${{ steps.login.outputs.registry }}" >> $GITHUB_OUTPUT

  build:
    name: Docker Image Build
    needs: login-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        env:
          ECR_REGISTRY: ${{ needs.login-ecr.outputs.registry }}
          ECR_REGISTRY_ORIGIN: ${{ needs.login-ecr.outputs.registry-origin }}
          IMAGE_TAG: ${{ github.sha }}
          MCBE_SERVER_ZIP_PATH: ${{ vars.MCBE_SERVER_ZIP_PATH }}
        run: |
          docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} . --build-arg MCBE_SERVER_ZIP_PATH=${MCBE_SERVER_ZIP_PATH}

  push:
    name: Docker Image push to ECR
    needs:
      - login-ecr
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ needs.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export image=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          # docker push ${image}
          echo "image=${image}" >> $GITHUB_OUTPUT

  # deploy:
  #   name: Deploy to ECS
  #   needs:
  #     - push
  #     - login-ecr
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: ${{ env.ECS_TASK_DIFINITION }}
  #         container-name: ${{ env.ECS_CONTAINER }}
  #         # image: ${{ steps.build-image.outputs.image }}
  #         image: ${{ needs.build.outputs.image }}

  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v2
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         service: ${{ env.ECS_SERVICE }}
  #         cluster: ${{ env.ECS_CLUSTER }}
  #         wait-for-service-stability: true

  # build-and-deploy:
  #   name: Build and Deploy
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: ${{ env.AWS_REGION }}
  #         # IAMロールでログイン
  #         role-to-assume: ${{ env.AWS_ROLE_ARN }}
  #         # IAMユーザでログイン
  #         # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2
  #       with:
  #         mask-password: "false"

  #     - name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} . --build-arg MCBE_SERVER_ZIP_PATH=${{ vars.MCBE_SERVER_ZIP_PATH }}
  #         docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
  #         echo "image=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: ${{ env.ECS_TASK_DIFINITION }}
  #         container-name: ${{ env.ECS_CONTAINER }}
  #         image: ${{ steps.build-image.outputs.image }}

  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v2
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         service: ${{ env.ECS_SERVICE }}
  #         cluster: ${{ env.ECS_CLUSTER }}
  #         wait-for-service-stability: true

  # - name: get world data
  # branch tpywao/mc-chiwanano

  # - name: get server config
  # RUN curl -LO https://gist.githubusercontent.com/tpywao/7620bdfdf478996372bb26a43c43b6cf/raw/795789431cee5513004e627763e678e106b41b0b/server.properties
